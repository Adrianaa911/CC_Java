1.Look at the code editor in the file Main.java. We have created a Main class with no method except main() and the class constructor.
Run the code and observe the output.
Notice that main() is very lengthy and contains many print statements. The repetitive code can be tedious to write if we need to make more than five deposits.
In this lesson, we’ll learn how to make methods to deposit, withdraw, and check account balance for the SavingsAccount class.



public class Main {
  public static void main(String[] args) {
    SavingsAccount savings = new SavingsAccount(2000);
      
    // Check balance:
    System.out.println("Hello!");
    System.out.println("Your balance is " + savings.balance);
      
    // Withdrawing:
    int afterWithdraw = savings.balance - 300;
    savings.balance = afterWithdraw;
    System.out.println("You just withdrew " + 300);
      
    // Check balance:
    System.out.println("Hello!");
    System.out.println("Your balance is " + savings.balance);
      
    // Deposit:
    int afterDeposit = savings.balance + 600;
    savings.balance = afterDeposit;
    System.out.println("You just deposited " + 600);
      
    // Check balance:
    System.out.println("Hello!");
    System.out.println("Your balance is " + savings.balance);
      
    // Deposit:
    int afterDeposit2 = savings.balance + 600;
    savings.balance = afterDeposit2;
    System.out.println("You just deposited " + 600);
      
    // Check balance:
    System.out.println("Hello!");
    System.out.println("Your balance is " + savings.balance);
  }
}


-- Defining Methods

If we were to define a checkBalance() method for the Savings Account example we talked about earlier, it would look like the following:

public void checkBalance(){
  System.out.println("Hello!");
  System.out.println("Your balance is " + balance);
}




The first line, public void checkBalance(), is the method declaration. It gives the program some information about the method:

public means that other 
classes can access this method. We will learn more about that later in the course.
The void keyword means that there is no specific 
output from the method. We will see methods that are not void later in this lesson, but for now, all of our methods will be void.
checkBalance() is the name of the method.
Every method has its own unique method signature which is composed of the method’s name and its parameter type. In this example, the method signature is checkBalance().


Calling Methods
7 min
When we add a non-static method to a class, it becomes available to use on an object of that class. In order to have our 
methods
Preview: Docs Loading link description
 get executed, we must call the method on the object we created.


tasks:

1.In the main() method of Main.java, call the advertise() method of the lemonadeStand instance and observe the displayed output.

public class Main {
  public static void main(String[] args) {
    Store lemonadeStand = new Store("Lemonade");
    lemonadeStand.advertise();
  }
}


2.Now, replace the argument “Lemonade” with “Coffee” in the instance definition and run the code.

public class Main {
  public static void main(String[] args) {
    Store lemonadeStand = new Store("Coffee");
    lemonadeStand.advertise();
  }
}


-- Reassigning Instance Fields
In Store.java:

public class Store {
  // instance fields
  String productType;
  public double price;
    
  // constructor method
  public Store(String product, double initialPrice) {
    productType = product;
    price = initialPrice;
  }
    
  // increase price method
  public void increasePrice(double priceToAdd){
    double newPrice = price + priceToAdd;
   price = newPrice;   
  }
}

In Main.java:

public class Main {
  public static void main(String[] args) {
    Store lemonadeStand = new Store("Lemonade", 3.75);
    lemonadeStand.increasePrice(1.5);
    System.out.println(lemonadeStand.price);
  }
}


