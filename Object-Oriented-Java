Classes: Instance Fields

A real car has characteristics such as brand, model, year, color, etc. In a Java object representing a car, these characteristics are represented by instance fields or instance variables.

In the last exercise, we created an object, but our object has no characteristics! We’ll add characteristics to our class by including instance fields or instance 
variables.
Let’s revisit the Car class example.
We want our Car objects to have different colors, so we declare an instance field called color. 
Instance variables are often characterized by their “has-a” relationship with the object. For example, a Car “has-a” color, “has-a” make, “has-a” model name, and “has-a” model year.
Think about what qualities other than color a car might have.



public class Car { 

 /* 
 declare fields inside the class 
 by specifying the type and name 
 */ 

 public String color; 
 public int year; 
 public String modelName; 
 public String make; 

 public Car() { 
   /*  
   instance fields available in 
   scope of the constructor method 
   */ 
 } 
} 

Tasks:
1.Inside the Dog class of Dog.java, add a field to represent a dog’s name. Call this field name. We leave it up to you to figure out the correct type of this field.
2.Inside the Dog class of Dog.java, add a field to represent a dog’s breed. Call this variable breed. We leave it up to you to figure out the correct type for this field.
3.Inside the Dog class of Dog.java, add a field to represent a dog’s weight in kg. Call this field weight. We leave it up to you to figure out the correct type of this field.

public class Dog{
  String name;
  String breed;
  double weight;
  public Dog(){
    //DO NOT WRITE ANYTHING HERE!!
  }
}


1.Create a new instance of Store called lemonadeStand in the main() method of Main.java and pass “lemonade” as the argument.
2.Inside the main() method, print the instance field productType from lemonadeStand.

public class Main{
  public static void main(String[] args) {    
    Store lemonadeStand = new Store("lemonade");
    System.out.println(lemonadeStand.productType);
  }
}

Classes: Multiple Fields
12 min
Objects are not limited to a single instance field. We can declare as many fields as necessary for our program’s requirements. To illustrate this, let’s add two more instance fields to our Car instances.

We’ll add a boolean isRunning, which represents whether the car engine is on or not, and an int velocity, which indicates the speed at which the car is traveling.

public class Car { 
  String color; 

  // new fields! 
  boolean isRunning; 
  int velocity; 

  // new parameters that correspond to the new fields 
  public Car(String carColor, boolean carRunning, int milesPerHour) { 
    color = carColor; 

    // assign new parameters to the new fields 
    isRunning = carRunning; 
    velocity = milesPerHour; 
  } 
} 

Copy to Clipboard

Public class Main(){ 

  public static void main(String[] args) { 
    // new values passed into the method call 
    Car ferrari = new Car("red", true, 27); 
    Car renault = new Car("blue", false, 70); 

    System.out.println(renault.isRunning); // false 
    System.out.println(ferrari.velocity); // 27 
  } 
} 

Copy to Clipboard

Now, the constructor has two new parameters: boolean carRunning and int milesPerHour.

Remember, it’s important to pass the arguments in the same order as they are listed in the parameters.

// values match types, no error 
Car honda = new Car("green", false, 0); 

// values do not match types, error! 
Car junker = new Car(true, 42, "brown"); 

